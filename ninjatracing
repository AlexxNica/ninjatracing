#!/usr/bin/env python

"""Converts one (or several) .ninja_log files into chrome's about:tracing format

Usage:
    rm $BUILDDIR/.ninja_log && ninja -C $BUILDDIR
    ninjatracing $BUILDDIR/.ninja_log > trace.json

(If you don't have time for a clean build, at least run
`ninja -C $BUILDDIR -t recompact` first.)"""

import json
import sys


class Target:
    """Represents a single line read for a .ninja_log file."""
    def __init__(self, start, end):
        self.start = int(start)
        self.end = int(end)
        self.targets = []


class Threads:
    """Tries to reconstruct the parallelism from a .ninja_log"""
    def __init__(self):
        self.workers = []  # Maps thread id to time that thread is occupied for.

    def alloc(self, target):
        """Places target in an available thread, or adds a new thread."""
        for worker in range(len(self.workers)):
            if self.workers[worker] <= target.start:
                self.workers[worker] = target.end
                return worker
        self.workers.append(target.end)
        return len(self.workers) - 1


def read_targets(log):
    """Reads all targets from .ninja_log file |log_file|, sorted by start
    time"""
    header = log.readline()
    assert header == "# ninja log v5\n", \
           "unrecognized ninja log version %r" % header
    targets = {}
    for line in log:
        start, end, _, name, cmdhash = line.strip().split('\t') # Ignore restat.
        targets.setdefault(cmdhash, Target(start, end)).targets.append(name)
    return sorted(targets.values(), key=lambda job: job.start)


def log_to_dicts(log, pid):
    """Reads a file-like object |log| containing a .ninja_log, and yields one
    about:tracing dict per command found in the log."""
    threads = Threads()
    for target in read_targets(log):
        yield {
            'name': '%0s' % ', '.join(target.targets), 'cat': 'targets',
            'ph': 'X', 'ts': str(target.start * 1000),
            'dur': str((target.end - target.start) * 1000),
            'pid': str(pid), 'tid': str(threads.alloc(target)), 'args': {},
            }


def main(argv):
    entries = []
    for pid, log_file in enumerate(argv):
        with open(log_file, 'r') as log:
            entries += list(log_to_dicts(log, pid))
    json.dump(entries, sys.stdout)


if __name__ == '__main__':
    if len(sys.argv) > 1:
        sys.exit(main(sys.argv[1:]))
    print __doc__
